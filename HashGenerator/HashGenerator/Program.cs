using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Data;
using System.Data.SQLite;
using System.Security.Cryptography;

namespace HashGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            string username = Environment.UserName;
            string path = @"C:\Users\" + username + @"\Desktop\signatures";
            Program pr = new Program();

            for (int i = 0; i < 100; i++)
            {
                string fn = pr.generateFileName(path);
                if (!File.Exists(fn))
                {
                    using (FileStream fs = File.Create(fn))
                    {
                        StringBuilder build = new StringBuilder();
                        Random random = new Random();
                        char ch;
                        int filesize = random.Next(256, 65536);
                        for (int j = 0; j < filesize; j++)
                        {
                            ch = Convert.ToChar(Convert.ToInt32(Math.Floor(93 * random.NextDouble() + 33)));
                            build.Append(ch);
                        }
                        fs.Close();
                        StreamWriter sw = new StreamWriter(fn);
                        sw.Write(build.ToString());
                        sw.Close();
                    }
                }
                else
                {
                    i--;
                }
            }

            List<string> hashes = pr.hashFiles(path);
            List<Int64> fileSizes = pr.getFileSizes(path);
            pr.printDetails(hashes, fileSizes);

            //pr.writeToDatabase(hashes, fileSizes);
        }

        void printDetails(List<string> hashes, List<Int64> fileSizes)
        {
            for (int i = 0; i < hashes.Count; i++)
            {
                string space = i < 10 ? " " : string.Empty;

                string print = space + i.ToString() + ": " + hashes[i] + "     Size:  " + fileSizes[i].ToString() + " bytes";
                Console.WriteLine(print);
            }
            Console.WriteLine("\nPress enter...");
            Console.ReadLine();
        }

        public string generateFileName(string path)
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), ".txt");
            string newPath = Path.Combine(path, newFileName);

            return newPath;
        }

        public List<Int64> getFileSizes(string path)
        {
            string[] files = Directory.GetFiles(path);
            List<Int64> fileSizes = new List<Int64>();

            foreach (string file in files)
            {
                FileInfo fi = new FileInfo(file);
                fileSizes.Add(fi.Length);
            }

            return fileSizes;
        }

        public List<string> hashFiles(string path)
        {
            string[] files = Directory.GetFiles(path);
            List<string> hashes = new List<string>();
            foreach (string file in files)
            {
                using (FileStream fs = File.OpenRead(file))
                {
                    SHA1Managed sha = new SHA1Managed();
                    byte[] checksum = sha.ComputeHash(fs);
                    string strChecksum = BitConverter.ToString(checksum).Replace("-", string.Empty);
                    hashes.Add(strChecksum);
                }
            }

            return hashes;
        }

        public void writeToDatabase(List<string> hashes, List<Int64> fileSizes)
        {
            try
            {
                SQLiteConnection conn = new SQLiteConnection("data source=C:\\Users\\Edele\\Desktop\\malware.db");
                conn.Open();
                SQLiteCommand cmd = new SQLiteCommand(conn);
                for (int i = 0; i < hashes.Count; i++)
                {
                    cmd.CommandText = "INSERT INTO malware_samples () VALUES (" + hashes[i] + ", " + fileSizes[i] + ")";
                    cmd.ExecuteNonQuery();
                }
                conn.Close();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
