using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace ProgressBar
{
    public partial class ProgressBar : UserControl
    {
        int min = 0;
        int max = 100;
        int val = 0;
        Color BarColour = Color.Blue;

        protected override void OnResize(EventArgs e)
        {
            //prevent repaint
            this.Invalidate();
        }
        protected override void OnPaint(PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            SolidBrush brush = new SolidBrush(BarColour);
            float percent = (float)(val - min) / (float)(max - min);
            Rectangle rect = this.ClientRectangle;
            rect.Width = (int)((float)rect.Width * percent);
            g.FillRectangle(brush, rect);
            Draw3DBorder(g);
            brush.Dispose();
            g.Dispose();
        }
        public int Minimum
        {
            get
            {
                return min;
            }
            set
            {
                //prevent negative
                if (value < 0)
                {
                    min = 0;
                }
                if (value > max)
                {
                    min = value;
                }
                //Ensure value is still in range
                if (val < min)
                {
                    val = min;
                }
                this.Invalidate();

            }
        }
        public int Maximum
        {
            get
            {
                return max;
            }
            set
            {
                if (value < min)
                {
                    min = value;
                }

                max = value;
                if (val > max)
                {
                    val = max;
                }
                this.Invalidate();
            }
        }
        public int Value
        {
            get
            {
                return val;
            }
            set
            {
                int old = val;
                if (value < min)
                {
                    val = min;
                }
                else if (value > max)
                {
                    val = max;
                }
                else
                {
                    val = value;
                }
                float percent;
                Rectangle newRect = this.ClientRectangle;
                Rectangle oldRect = this.ClientRectangle;
                //calculate progress using new value
                percent = (float)(val - min) / (float)(max - min);
                newRect.Width = (int)((float)newRect.Width * percent);
                percent = (float)(old - min) / (float)(max - min);
                oldRect.Width = (int)((float)oldRect.Width * percent);
                Rectangle update = new Rectangle();
                if (newRect.Width > oldRect.Width)
                {
                    update.X = oldRect.Size.Width;
                    update.Width = newRect.Width - oldRect.Width;
                }
                else
                {
                    update.X = newRect.Size.Width;
                    update.Width = oldRect.Width - newRect.Width;
                }
                update.Height = this.Height;
                this.Invalidate(update);
            }
        }
        public Color ProgressBarColour
        {
            get
            {
                return BarColour;
            }
            set
            {
                BarColour = value;
                this.Invalidate();
            }
        }
        private void Draw3DBorder(Graphics g)
        {
            int penWidth = (int)Pens.White.Width;

            g.DrawLine(Pens.DarkGray,
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Top),
                new Point(this.ClientRectangle.Width - penWidth, this.ClientRectangle.Top));
            g.DrawLine(Pens.DarkGray,
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Top),
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Height - penWidth));
            g.DrawLine(Pens.White,
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Height - penWidth),
                new Point(this.ClientRectangle.Width - penWidth, this.ClientRectangle.Height - penWidth));
            g.DrawLine(Pens.White,
                new Point(this.ClientRectangle.Width - penWidth, this.ClientRectangle.Top),
                new Point(this.ClientRectangle.Width - penWidth, this.ClientRectangle.Height - penWidth));
        }
    }
}
