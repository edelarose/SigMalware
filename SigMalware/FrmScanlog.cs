using System;
using Common.Lib.dll.Presenters;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;


namespace SigMalware
{
    public partial class FrmScanlog : Form
    {
        ScanPresenter _presenter;

        public FrmScanlog()
        {
            InitializeComponent();
            _presenter = new ScanPresenter();
        }
        
        private void btnScan_Click(object sender, EventArgs e)
        {
            object[] files = _presenter.StartScan();
            progressVisible = true;
            int noOfFiles = files.Count();
            progressMax = noOfFiles;
            for (int i = 0; i < noOfFiles; i++)
            {
                progressAmt++;
            }
            chkListBox.Items.AddRange(files);
            StreamWriter log;
            string fileName = "sibmet.log";
            if (!File.Exists(fileName))
            {
                log = new StreamWriter(fileName);
            }
            else
            {
                log = File.AppendText(fileName);
            }
            log.WriteLine("SIBMET LOG FILE");
            log.WriteLine("Scan saved at: " + DateTime.Now);
            log.WriteLine("Username: " + SystemInformation.UserName);
            log.WriteLine("Platform: " + Environment.OSVersion);
            log.WriteLine("Boot mode: " + SystemInformation.BootMode);
            log.WriteLine("Files found: ");
            foreach (object item in chkListBox.Items)
            {
                log.WriteLine(item.ToString());
            }
            FileInfo f = new FileInfo(fileName);
            log.WriteLine("");
            log.WriteLine("************");
            log.WriteLine("End of file " + f.Length + " bytes");
            log.Close();
            Process.Start("notepad.exe", fileName);
        }

        private void btnFix_Click(object sender, EventArgs e)
        {
            if (chkListBox.CheckedItems.Count == 1)
            {
                var result = MessageBox.Show("Fix this item?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    CheckedListBox newChk = new CheckedListBox();
                    newChk.Items.AddRange(_presenter.FixFiles(chkListBox.CheckedItems));
                    if (newChk == null)
                    {
                        MessageBox.Show("File not found", "Error");
                        return;
                    }
                    chkListBox.Items.Clear();
                    chkListBox.Items.AddRange(newChk.Items);
                    MessageBox.Show("File deleted", "Deleted", MessageBoxButtons.OK);
                }
                else
                {
                    return;
                }
            }
            else if (chkListBox.CheckedItems.Count > 1)
            {
                var res = MessageBox.Show("Fix " + chkListBox.CheckedItems.Count.ToString() + " selected items?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (res == DialogResult.Yes)
                {
                    CheckedListBox newChk = new CheckedListBox();
                    newChk.Items.AddRange(_presenter.FixFiles(chkListBox.CheckedItems));
                    if (newChk == null)
                    {
                        MessageBox.Show("Files not found", "Error");
                        return;
                    }
                    chkListBox.Items.Clear();
                    chkListBox.Items.AddRange(newChk.Items);
                    MessageBox.Show("Files deleted", "Deleted", MessageBoxButtons.OK);
                }
                else
                {
                    return;
                }
            }
            else
            {
                MessageBox.Show("Please select items to fix", "Stop", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
        }
        private void btnMenu_Click(object sender, EventArgs e)
        {
            FrmScan formScan = new FrmScan();
            this.Visible = false;
            formScan.ShowDialog();
            this.Close();
        }
        private void btnLog_Click(object sender, EventArgs e)
        {
            string fileName = "sibmet.log";
            if (File.Exists(fileName))
            {
                Process.Start("notepad.exe", fileName);
            }
            else
            {
                var msg = MessageBox.Show("No log file saved - run scan now?", "Scan now?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (msg == DialogResult.Yes)
                {
                    btnScan_Click(this, EventArgs.Empty);
                }
                else
                {
                    return;
                }
            }
        }
        private void btnConfig_Click(object sender, EventArgs e)
        {
            FrmConfig formConf = new FrmConfig();
            this.Visible = false;
            formConf.ShowDialog();
            this.Close();
        }

        #region Accessors
        public bool progressVisible
        {
            get { return progressBar1.Visible; }
            set { progressBar1.Visible = value; }
        }

        public int progressAmt
        {
            get { return progressBar1.Value; }
            set { progressBar1.Value = value; progressBar1.Update(); progressBar1.Refresh(); }
        }

        public int progressMax
        {
            get { return progressBar1.Maximum; }
            set { progressBar1.Minimum = 0; progressBar1.Maximum = value; }
        }
        #endregion
    }
}
