using System;
using Common.Lib.dll.Presenters;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using SigMalware.Properties;


namespace SigMalware
{
    public partial class FrmScanlog : Form, IScanView
    {
        #region Attributes & Constructor
        ScanPresenter _presenter;
        Dictionary<string, string> fileDefinitions;
        public FrmScanlog()
        {
            InitializeComponent();
            _presenter = new ScanPresenter(this);
        }
        #endregion
        #region Public methods
        public void WriteLog()
        {
            StreamWriter log;
            string fileName = "sibmet.log";
            if (!File.Exists(fileName))
            {
                log = new StreamWriter(fileName);
            }
            else
            {
                log = File.AppendText(fileName);
            }
            log.WriteLine("SIBMET LOG FILE");
            log.WriteLine("Scan saved at: " + DateTime.Now);
            log.WriteLine("Username: " + SystemInformation.UserName);
            log.WriteLine("Platform: " + Environment.OSVersion);
            log.WriteLine("Boot mode: " + SystemInformation.BootMode);
            log.WriteLine("Files found: ");
            foreach (object item in chkListBox.Items)
            {
                log.WriteLine(item.ToString());
            }
            FileInfo f = new FileInfo(fileName);
            log.WriteLine("");
            log.WriteLine("************");
            log.WriteLine("End of file " + f.Length + " bytes");
            log.Close();
            Process.Start("notepad.exe", fileName);
        }
        #endregion
        #region Eventhandlers
        public void FrmScanlog_Load(object sender, EventArgs e)
        {
            if (Settings.Default.WindowLocation == null)
            {
                this.Location = Settings.Default.WindowLocation;
            }
            if (Settings.Default.WindowSize == null)
            {
                this.Size = Settings.Default.WindowSize;
            }
        }
        private void btnScan_Click(object sender, EventArgs e)
        {
            List<string> files = _presenter.StartScan();
            List<string> shortFiles = _presenter.getFileNamesFromDir(files);
            fileDefinitions = _presenter.fullNameOfFile(shortFiles, files);
            WriteLog();
        }

        private void btnFix_Click(object sender, EventArgs e)
        {
            int noCheckedItems = chkListBox.CheckedItems.Count;
            if (noCheckedItems > 0)
            {
                DialogResult result = DialogResult.No;
                if (noCheckedItems > 1)
                {
                    result = MessageBox.Show("Fix " + chkListBox.CheckedItems.Count.ToString() + " selected items?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                }
                else
                {
                    result = MessageBox.Show("Fix this item?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                }
                if (result == DialogResult.Yes)
                {
                    CheckedListBox newChk = new CheckedListBox();
                    List<string> toDelete = new List<string>();
                    for (int i = 0; i < chkListBox.CheckedItems.Count; i++)
                    {
                        toDelete.Add(fileDefinitions[chkListBox.CheckedItems[i].ToString()]);
                    }

                    string[] newFullFiles = _presenter.FixFiles(toDelete);

                    List<string> newFiles = new List<string>();
                    foreach (string f in newFullFiles)
                    {
                        newFiles.Add(f.Substring(f.LastIndexOf('\\') + 1));
                    }

                    chkListBox.Items.Clear();
                    chkListBox.Items.AddRange(newFiles.ToArray());
                    progressBar1.Value = chkListBox.Items.Count;
                    MessageBox.Show("File(s) deleted", "Deleted", MessageBoxButtons.OK);
                }
                else return;
            }
            else
            {
                MessageBox.Show("Please select items to fix", "Stop", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
        }
        private void btnFalse_Click(object sender, EventArgs e)
        {
            int noItems = chkListBox.CheckedItems.Count;
            if (noItems > 0)
            {
                DialogResult msgboxresult = DialogResult.No;

                if (noItems > 1)
                {
                    msgboxresult = MessageBox.Show("Are you sure you wish to mark " + chkListBox.CheckedItems.Count.ToString() + " items as false positives?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                else
                {
                    msgboxresult = MessageBox.Show("Are you sure you wish to mark this item as false positive?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                }
                if (msgboxresult == DialogResult.Yes)
                {
                    List<string> falsePositives = new List<string>();
                    foreach (string checkedItem in chkListBox.CheckedItems)
                    {
                        falsePositives.Add(fileDefinitions[checkedItem]);
                        //file.Add(files.ToString());
                    }
                    FrmFPositive formPos = new FrmFPositive();
                    formPos.Init(falsePositives);
                }
                else return;

            }
            else 
            {
                MessageBox.Show("Please select file(s) to mark as False Positives", "Mark as False Positive", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
        }
        private void btnMenu_Click(object sender, EventArgs e)
        {
            FrmScan formScan = new FrmScan();
            this.Visible = false;
            formScan.ShowDialog();
            this.Close();
        }
        private void btnLog_Click(object sender, EventArgs e)
        {
            string fileName = "sibmet.log";
            if (File.Exists(fileName))
            {
                Process.Start("notepad.exe", fileName);
            }
            else
            {
                var msg = MessageBox.Show("No log file saved - run scan now?", "Scan now?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (msg == DialogResult.Yes)
                {
                    btnScan_Click(this, EventArgs.Empty);
                }
                else
                {
                    return;
                }
            }
        }
        private void btnConfig_Click(object sender, EventArgs e)
        {
            FrmConfig formConf = new FrmConfig();
            this.Visible = false;
            formConf.ShowDialog();
            this.Close();
        }
        private void btnExit_Click(object sender, EventArgs e)
        {
            var res = MessageBox.Show("Are you sure you want to exit?", "Confirm exit", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (res == DialogResult.Yes)
            {
                var saveProgress = MessageBox.Show("Save position in program for next time?", "Save progress", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (saveProgress == DialogResult.Yes)
                {
                    Settings.Default.WindowLocation = this.Location;
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        Settings.Default.WindowSize = this.Size;
                    }
                    else
                    {
                        Settings.Default.WindowSize = this.RestoreBounds.Size;
                    }
                    Settings.Default.Save();
                }
                Application.Exit();
            }
            else
            {
                return;
            }
        }
        #endregion
        #region Accessors
        public bool progressVisible
        {
            get { return progressBar1.Visible; }
            set { progressBar1.Visible = value; }
        }
        public int progressAmt
        {
            get { return progressBar1.Value; }
            set { progressBar1.Value = value; progressBar1.Update(); progressBar1.Refresh(); }
        }
        public int progressMax
        {
            get { return progressBar1.Maximum; }
            set { progressBar1.Minimum = 0; progressBar1.Maximum = value; }
        }
        public string[] listItems
        {
            set
            {
                if (value.Length > 0)
                {
                    chkListBox.Items.AddRange(value);
                    btnFix.Enabled = true;
                    btnFalse.Enabled = true;
                }
                else
                {
                    btnFix.Enabled = false;
                    btnFalse.Enabled = false;
                }
            }
        }
        public string numberOfItems
        {
            set
            {
                this.lblNumItems.Text = value;
            }
        }
        #endregion
    }
}
