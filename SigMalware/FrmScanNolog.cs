using Common.Lib.dll.Presenters;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using SigMalware.Properties;

namespace SigMalware
{
    public partial class FrmScanNolog : Form
    {
        ScanPresenter _presenter;
        public FrmScanNolog()
        {
            InitializeComponent();
            _presenter = new ScanPresenter();
        }
        private void FrmScanNoLog_Load(object sender, EventArgs e)
        {
            if (Settings.Default.WindowLocation != null)
            {
                this.Location = Settings.Default.WindowLocation;
            }
            if(Settings.Default.WindowSize != null)
            {
                this.Size = Settings.Default.WindowSize;
            }
        }
        private void btnScan_Click(object sender, EventArgs e)
        {
            object[] files = _presenter.StartScan();
            progressVisible = true;
            int noOfFiles = files.Count();
            progressMax = noOfFiles;
            for (int i = 0; i < noOfFiles; i++)
            {
                progressAmt++;
            }
            chkListBox.Items.AddRange(files);
            if (chkListBox.Items.Count >= 1)
            {
                btnFix.Enabled = true;
                btnFalse.Enabled = true;
            }
        }
        private void btnFix_Click(object sender, EventArgs e)
        {
            if (chkListBox.CheckedItems.Count == 1)
            {
                var result = MessageBox.Show("Fix this item?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    CheckedListBox newChk = new CheckedListBox();
                    newChk.Items.AddRange(_presenter.FixFiles(chkListBox.CheckedItems));
                    if (newChk == null)
                    {
                        MessageBox.Show("File not found", "Error");
                        return;
                    }
                    chkListBox.Items.Clear();
                    chkListBox.Items.AddRange(newChk.Items);
                    MessageBox.Show("File deleted", "Deleted", MessageBoxButtons.OK);
                }
                else
                {
                    return;
                }
            }
            else if (chkListBox.CheckedItems.Count > 1)
            {
                var res = MessageBox.Show("Fix " + chkListBox.CheckedItems.Count.ToString() + " selected items?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (res == DialogResult.Yes)
                {
                    CheckedListBox newChk = new CheckedListBox();
                    newChk.Items.AddRange(_presenter.FixFiles(chkListBox.CheckedItems));
                    if (newChk == null)
                    {
                        MessageBox.Show("Files not found", "Error");
                        return;
                    }
                    chkListBox.Items.Clear();
                    chkListBox.Items.AddRange(newChk.Items);
                    MessageBox.Show("Files deleted", "Deleted", MessageBoxButtons.OK);
                }
                else
                {
                    return;
                }
            }
            else
            {
                MessageBox.Show("Please select items to fix", "Stop", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                btnFix.Enabled = false;
                return;
            }
        }
        private void btnFalse_Click(object sender, EventArgs e)
        {
            if (chkListBox.CheckedItems.Count == 1)
            {
                var falsepositive = MessageBox.Show("Are you sure you wish to mark this item as false positive?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (falsepositive == DialogResult.Yes)
                {
                    FrmFPositive formPos = new FrmFPositive();
                    this.Visible = false;
                    formPos.ShowDialog();
                    this.Close();
                }
                else
                {
                    return;
                }
            }
            else if (chkListBox.CheckedItems.Count > 1)
            {
                var fpos = MessageBox.Show("Are you sure you wish to mark" + chkListBox.CheckedItems.Count.ToString() + "items as false positives?", "Proceed?", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (fpos == DialogResult.Yes)
                {
                    FrmFPositive formPos = new FrmFPositive();
                    this.Visible = false;
                    formPos.ShowDialog();
                    this.Close();
                }
                else
                {
                    return;
                }
            }
            else
            {
                btnFalse.Enabled = false;
            }
        }
        private void btnMenu_Click(object sender, EventArgs e)
        {
            FrmScan formScan = new FrmScan();
            this.Visible = false;
            formScan.ShowDialog();
            this.Close();
        }
        private void btnConfig_Click(object sender, EventArgs e)
        {
            FrmConfig formConf = new FrmConfig();
            this.Visible = false;
            formConf.ShowDialog();
            this.Close();
        }
        private void btnExit_Click(object sender, EventArgs e)
        {
            var res = MessageBox.Show("Are you sure you want to exit?", "Confirm exit", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (res == DialogResult.Yes)
            {
                var saveProgress = MessageBox.Show("Save position in program for next time?", "Save progress", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (saveProgress == DialogResult.Yes)
                {
                    Settings.Default.WindowLocation = this.Location;
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        Settings.Default.WindowSize = this.Size;
                    }
                    else
                    {
                        Settings.Default.WindowSize = this.RestoreBounds.Size;
                    }
                    Settings.Default.Save();
                }
                Application.Exit();
            }
            else
            {
                return;
            }
        }
        #region Accessors
        public bool progressVisible
        {
            get { return progressBar1.Visible; }
            set { progressBar1.Visible = value; }
        }

        public int progressAmt
        {
            get { return progressBar1.Value; }
            set { progressBar1.Value = value; progressBar1.Update(); progressBar1.Refresh(); }
        }

        public int progressMax
        {
            get { return progressBar1.Maximum; }
            set { progressBar1.Minimum = 0; progressBar1.Maximum = value; }
        }
        #endregion

    }
}
