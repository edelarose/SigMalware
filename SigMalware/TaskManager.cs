using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using Common.Lib.dll.Presenters;
using System.Threading;

namespace SigMalware
{
    public partial class TaskManager : Form, ITaskView
    {
        TaskPresenter _presenter;

        #region User-Defined Variables
        public static TaskManager objTaskMgr;
        public string newtaskpath;
        public string machineName = Environment.MachineName.ToString();
        public bool erroroccurred = false;
        #endregion
        public TaskManager()
        {
            _presenter = new TaskPresenter(this);
            InitializeComponent();
        }
        private void TaskManager_Load(object sender, EventArgs e)
        {
            _presenter.FillApps();
            _presenter.FillTaskList();
        }

        private void menuItemEnd_Click(object sender, EventArgs e)
        {
            if (listProcesses.SelectedItems.Count > 0)
            {
                _presenter.EndProcess(Convert.ToInt32(listProcesses.SelectedItems[0].SubItems[1].Text.ToString()));
            }
        }
        private void menuItemExit_Click(object sender, EventArgs e)
        {
            var ans = MessageBox.Show("Are you sure you want to exit the process manager?", "Confirm Exit", MessageBoxButtons.YesNo, MessageBoxIcon.Stop);
            if(ans == DialogResult.Yes)
            {
                FrmConfig formConf = new FrmConfig();
                this.Visible = false;
                formConf.ShowDialog();
                this.Close();
            }
            else
            {
                return;
            }
        }
        private void menuOptionsTop_Click(object sender, EventArgs e)
        {
            objTaskMgr = new TaskManager();

            menuOptionsTop.Checked = !menuOptionsTop.Checked;
            objTaskMgr.TopMost = !menuOptionsTop.Checked;
        }
        private void menuOptionsHide_Click(object sender, EventArgs e)
        {
            menuOptionsHide.Checked = !menuOptionsHide.Checked;
            objTaskMgr.ShowInTaskbar = menuOptionsHide.Checked;
        }
        private void menuItemRefresh_Click(object sender, EventArgs e)
        {
            _presenter.FillTaskList();
            _presenter.FillApps();
        }
        private void menuItemScan_Click(object sender, EventArgs e)
        {
            _presenter.DetectMalware();
        }
        private void btnSend_Click(object sender, EventArgs e)
        {
            _presenter.DetectMalware();
        }
         
        #region Accessors
        public Process[] processes
        {
            set
            {
                foreach (Process process in value)
                {
                    string[] procs = new string[]{process.ProcessName, process.MainModule.FileVersionInfo.FileDescription.ToString(), process.Id.ToString(), process.StartTime.ToShortTimeString(), 
                        process.TotalProcessorTime.Duration().Hours.ToString()+":"+process.TotalProcessorTime.Duration().Minutes.ToString()+":"+
                        process.TotalProcessorTime.Duration().Seconds.ToString(), (process.WorkingSet64/1024).ToString() + "k", (process.PeakWorkingSet64/1024).ToString()+"k",
                        process.Threads.Count.ToString()};
                    ListViewItem proc = new ListViewItem(procs);
                    listProcesses.Items.Add(proc);
                    listProcesses.Sorting = SortOrder.Ascending;
                }
            }
        }
        public Process[] apps
        {
            set
            {
                foreach (Process p in value)
                {
                    if (!String.IsNullOrEmpty(p.MainWindowTitle.ToString()))
                    {
                        string status = p.Responding ? "Running" : "Not Responding";
                        ListViewItem app = new ListViewItem(new string[] { p.MainWindowTitle, status });
                        listApplications.Items.Add(app);
                    }
                }
                listApplications.Sorting = SortOrder.Ascending;
            }
        }
        public string processName
        {
            get { return procName.Text; }
        }
        public string statuspanel1
        {
            set { this.statusBar.Panels[0].Text = value; }
        }
        public string statuspanel2
        {
            set { this.statusBar.Panels[1].Text = value; }
        }
        public int selectedProcess { get { return Convert.ToInt32(listProcesses.SelectedItems[0].SubItems[1].Text.ToString()); } }
        public string malwareStatus
        {
            set
            {
                if (value == "False Positive")
                {
                    FrmFPositive formPos = new FrmFPositive();
                    this.Visible = false;
                    formPos.ShowDialog();
                    this.Close();
                }
            }
        }
        #endregion
    }
}
