using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;

namespace SigMalware
{
    public partial class TaskManager : Form
    {
        #region User-Defined Variables
        public static TaskManager objTaskMgr;
        public string newtaskpath;
        public string machineName = Environment.MachineName.ToString();
        public bool erroroccurred = false;
        #endregion
        public TaskManager()
        {
            InitializeComponent();

        }
        public void FillTaskList()
        {
            Process[] Prc = null;
            Cursor.Current = Cursors.WaitCursor;
            try
            {
                //clear any items already in the box
                listProcesses.Items.Clear();
                Prc = Process.GetProcesses(machineName);
            }
            catch(Exception e)
            {
                MessageBox.Show("Error" + e.Message);
            }
                int threadsCount = 0;
                foreach (Process process in Prc)
                {
                    try
                    {
                        string[] prcDetails = new string[]{process.ProcessName, process.MainModule.FileVersionInfo.FileDescription.ToString(), process.Id.ToString(), process.StartTime.ToShortTimeString(), 
                        process.TotalProcessorTime.Duration().Hours.ToString()+":"+process.TotalProcessorTime.Duration().Minutes.ToString()+":"+
                        process.TotalProcessorTime.Duration().Seconds.ToString(), (process.WorkingSet64/1024).ToString() + "k", (process.PeakWorkingSet64/1024).ToString()+"k",
                        process.Threads.Count.ToString()};
                        ListViewItem proc = new ListViewItem(prcDetails);
                        listProcesses.Items.Add(proc);
                        listProcesses.Sorting = SortOrder.Ascending;
                        threadsCount += process.Threads.Count;
                    }
                    catch { }
                }
                statusBar.Panels[0].Text = "Processes: " + Prc.Length.ToString();
                statusBar.Panels[1].Text = "Threads: " + (threadsCount + 1).ToString();
            Cursor.Current = Cursors.Default;
        }
        public void FillApps()
        {
            StringBuilder build = new StringBuilder();
            string status;
            foreach (Process p in Process.GetProcesses("."))
            {
                try
                {
                    if(p.MainWindowTitle.Length > 0)
                    {
                        if (p.Responding == true)
                        {
                            status = "Running";
                        }
                        else
                        {
                            status = "Not Responding";
                        }
                        string[] appDetails = new string[] { p.MainWindowTitle.ToString(), status};
                        ListViewItem app = new ListViewItem(appDetails);
                        listApplications.Items.Add(app);
                        listApplications.Sorting = SortOrder.Ascending;
                    }
                }
                catch { }
            }
        }
        private void TaskManager_Load(object sender, EventArgs e)
        {
            machineName = ".";
            FillTaskList();
            FillApps();
        }
        private void DetectMalware()
        {
            string mal1 = "Security";
            string mal2 = "malware";
            string mal3 = "virus";
            //foreach (ListViewItem item in listProcesses.Items)
            //TODO: detect malware in task manager
            if (procName.Text.Contains(mal1) || procName.Text.Contains(mal2) || procName.Text.Contains(mal3))
            {
                var malware = MessageBox.Show("Possible Malware threat found, Kill process?", "Threat found", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (malware == DialogResult.Yes)
                {
                    int selectedpid = Convert.ToInt32(listProcesses.SelectedItems[0].SubItems[1].Text.ToString());
                    Process.GetProcessById(selectedpid, machineName).Kill();
                }
                else
                {
                    var falsepositive = MessageBox.Show("Set process as false positive?", "False positive?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (falsepositive == DialogResult.Yes)
                    {
                        var sure = MessageBox.Show("Warning: only mark processes as a false positive if you know they are safe", "Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (sure == DialogResult.Yes)
                        {
                            //TODO: create false positives form (like avast)
                        }
                        else
                        {
                            return;
                        }
                    }
                    else
                    {
                        return;
                    }
                }
            }
            else
            {
                MessageBox.Show("No malware found in task manager. Please ensure to scan your computer using up-to-date anti-malware software.", "No threats", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        //end process
        private void menuItemEnd_Click(object sender, EventArgs e)
        {
            if (listProcesses.SelectedItems.Count >= 1)
            {
                var msg = MessageBox.Show("This will end a process!", "Warning: End Process", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                if (msg == DialogResult.OK)
                {
                    try
                    {
                        int selectedpid = Convert.ToInt32(listProcesses.SelectedItems[0].SubItems[1].Text.ToString());
                        Process.GetProcessById(selectedpid, machineName).Kill();
                        FillTaskList();
                    }
                    catch
                    {
                        erroroccurred = true;
                        MessageBox.Show("Could not end process", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else
                {
                    return;
                }
            }
        }
        private void menuItemExit_Click(object sender, EventArgs e)
        {
            var ans = MessageBox.Show("Are you sure you want to exit the process manager?", "Confirm Exit", MessageBoxButtons.YesNo, MessageBoxIcon.Stop);
            if(ans == DialogResult.Yes)
            {
                FrmConfig formConf = new FrmConfig();
                this.Visible = false;
                formConf.ShowDialog();
                this.Close();
            }
            else{
                return;
            }
        }
        private void menuOptionsTop_Click(object sender, EventArgs e)
        {
            objTaskMgr = new TaskManager();
            if (menuOptionsTop.Checked)
            {
                menuOptionsTop.Checked = false;
                objTaskMgr.TopMost = false;
            }
            else
            {
                menuOptionsTop.Checked = true;
                objTaskMgr.TopMost = true;
            }
        }
        private void menuOptionsHide_Click(object sender, EventArgs e)
        {
            if (menuOptionsHide.Checked)
            {
                menuOptionsHide.Checked = false;
                objTaskMgr.ShowInTaskbar = true;
            }
            else
            {
                menuOptionsHide.Checked = true;
                objTaskMgr.ShowInTaskbar = false;
            }
        }
        private void menuItemRefresh_Click(object sender, EventArgs e)
        {
            FillTaskList();
        }
        private void menuItemScan_Click(object sender, EventArgs e)
        {
            DetectMalware();
        }

        private void listApplications_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

    }
}
