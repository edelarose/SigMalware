using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using Common.Lib.dll.Presenters;
using System.Threading;

namespace SigMalware
{
    public partial class TaskManager : Form, ITaskView
    {
        #region Attributes & Constructor
        TaskPresenter _presenter;
        public static TaskManager objTaskMgr;
        public string newtaskpath;
        public string machineName = Environment.MachineName.ToString();
        public bool erroroccurred = false;
        public TaskManager()
        {
            _presenter = new TaskPresenter(this);
            InitializeComponent();
        }
        #endregion
        #region Eventhandlers
        private void TaskManager_Load(object sender, EventArgs e)
        {
            _presenter.FillTaskList();
            _presenter.FillApps();
        }
        private void menuItemEnd_Click(object sender, EventArgs e)
        {
            if (listProcesses.SelectedItems.Count > 0)
            {
                int selectedpid = Convert.ToInt32(listProcesses.SelectedItems[0].SubItems[2].Text.ToString()); 
                _presenter.EndProcess(selectedpid);
            }
            else if (listApplications.SelectedItems.Count > 0)
            {
                MessageBox.Show("Please select a process rather than an application", "Select Process", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                
            }
            else
            {
                MessageBox.Show("Please select a process to end!", "Select Process", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }
        }
        private void menuItemExit_Click(object sender, EventArgs e)
        {
            var ans = MessageBox.Show("Are you sure you want to exit the process manager?", "Confirm Exit", MessageBoxButtons.YesNo, MessageBoxIcon.Stop);
            if(ans == DialogResult.Yes)
            {
                FrmConfig formConf = new FrmConfig();
                this.Visible = false;
                formConf.ShowDialog();
                this.Close();
            }
            else
            {
                return;
            }
        }
        private void menuOptionsTop_Click(object sender, EventArgs e)
        {
            objTaskMgr = new TaskManager();

            menuOptionsTop.Checked = !menuOptionsTop.Checked;
            objTaskMgr.TopMost = menuOptionsTop.Checked;
        }
        private void menuOptionsHide_Click(object sender, EventArgs e)
        {
            objTaskMgr = new TaskManager();

            menuOptionsHide.Checked = !menuOptionsHide.Checked;
            objTaskMgr.ShowInTaskbar = menuOptionsHide.Checked;
        }
        private void menuItemScan_Click(object sender, EventArgs e)
        {
            _presenter.DetectMalware();
        }
        private void menuItemAbout_Click(object sender, EventArgs e)
        {
            FrmAbout formAbout = new FrmAbout();
            formAbout.ShowDialog();
        }
        private void btnSend_Click(object sender, EventArgs e)
        {
            _presenter.DetectMalware();
        }
        #endregion
        #region Accessors
        public Process[] processes
        {
            set
            {
                List<ListViewItem> arrProc = new List<ListViewItem>();
                foreach (Process process in value)
                {
                    try
                    {
                        string[] procs = new string[]{process.ProcessName, process.MainModule.FileVersionInfo.FileDescription.ToString(), process.Id.ToString(), process.StartTime.ToShortTimeString(), 
                        process.TotalProcessorTime.Duration().Hours.ToString()+":"+process.TotalProcessorTime.Duration().Minutes.ToString()+":"+
                        process.TotalProcessorTime.Duration().Seconds.ToString(), (process.WorkingSet64/1024).ToString() + "k", (process.PeakWorkingSet64/1024).ToString()+"k",
                        process.Threads.Count.ToString()};
                        ListViewItem proc = new ListViewItem(procs);
                        arrProc.Add(proc);
                    }
                    catch (Exception e)
                    {
                        Console.Write(e.Message);
                    }
                }

                foreach (ListViewItem lvi in arrProc)
                {
                    listProcesses.Items.Add(lvi);
                }

                for (int i = 0; i < listProcesses.Items.Count - 1; i++)
                {
                    if (listProcesses.Items[i].Tag == listProcesses.Items[i + 1].Tag)
                    {
                        listProcesses.Items[i + 1].Remove();
                    }
                }
            }
        }
        public Process[] apps
        {
            set
            {
                List<ListViewItem> arrApp = new List<ListViewItem>();

                foreach (Process p in value)
                {
                    try
                    {

                        if (!String.IsNullOrEmpty(p.MainWindowTitle.ToString()))
                        {
                            string status = p.Responding ? "Running" : "Not Responding";
                            ListViewItem app = new ListViewItem(new string[] { p.MainWindowTitle, status });
                            arrApp.Add(app);
                        }
                    }
                    catch (Exception e)
                    {
                        Console.Write(e.Message);
                    }
                }
                foreach (ListViewItem lvi in arrApp){
                    listApplications.Items.Add(lvi);
                }

                for (int i = 0; i < listApplications.Items.Count - 1; i++)
                {
                    if (listApplications.Items[i].Tag == listApplications.Items[i + 1].Tag)
                    {
                        listApplications.Items[i + 1].Remove();
                    }
                }
                listApplications.Sorting = SortOrder.Ascending;
            }
        }
        public string processName
        {
            get { return procName.Text; }
        }
        public string statuspanel1
        {
            set { this.statusBar.Panels[0].Text = value; }
        }
        public string statuspanel2
        {
            set { this.statusBar.Panels[1].Text = value; }
        }
        public int selectedProcess { get { return Convert.ToInt32(listProcesses.SelectedItems[0].SubItems[1].Text.ToString()); } }
        public string malwareStatus
        {
            set
            {
                if (value == "False Positive")
                {
                    List<string> process = new List<string>();
                    foreach (object p in processName)
                    {
                        process.Add(p.ToString());
                    }
                    FrmFPositive formPos = new FrmFPositive();
                    formPos.Init(process);
                }
            }
        }
        #endregion
    }
}
