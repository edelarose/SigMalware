using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Security.Principal;

namespace SigMalware
{
    public partial class FrmHosts : Form
    {
        public string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + @"\drivers\etc\hosts";
        public WindowsPrincipal pr;
        public bool admin;
        public FrmHosts()
        {
            InitializeComponent();
            PopulateGrid();
        }
        private void notAdmin()
        {
            MessageBox.Show("You must be an administrator to access the hosts file", "Access Denied", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            FrmConfig formConf = new FrmConfig();
            this.Visible = false;
            formConf.ShowDialog();
            this.Close();
        }
        private void PopulateGrid()
        {
            //check if admin account used to access hosts
            pr = new WindowsPrincipal(WindowsIdentity.GetCurrent());
            admin = pr.IsInRole(WindowsBuiltInRole.Administrator); 
            if (!admin)
            {
                notAdmin();
            }
            else
            {
                FileStream file = File.Open(path, FileMode.Open, FileAccess.Read);
                StreamReader reader = new StreamReader(file);
                string hostsText = reader.ReadToEnd();
                file.Close();
                reader.Close();
                String[] hostsArray = hostsText.Split(new char[] { '\n' });
                foreach (string host in hostsArray)
                {
                    lstHosts.Items.Add(host);
                }
                //TODO: Run detect malware AFTER else statement executed
                DetectMalware();
            }
            
        }
        private void DetectMalware()
        {
            if (lstHosts.Items.Count > 23)
            {
                MessageBox.Show("Possible malware found, download original hosts file?", "Malware detected", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            }
            else
            {
                MessageBox.Show("Malware not found", "No malware", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            FrmConfig formConf = new FrmConfig();
            this.Visible = false;
            formConf.ShowDialog();
            this.Close();
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

    }
}
