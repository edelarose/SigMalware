using Common.Lib.dll.Presenters;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Common.Lib.dll.Presenters;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Security.Principal;
using SigMalware.Properties;

namespace SigMalware
{
    public partial class FrmHosts : Form, HostsPresenter.IHostsView
    {
        HostsPresenter _presenter;
        public FrmHosts()
        {
            _presenter = new HostsPresenter(this);
            InitializeComponent();
        }
        private void FrmHosts_Load(object sender, EventArgs e)
        {
            if (Settings.Default.WindowLocation == null)
            {
                this.Location = Settings.Default.WindowLocation;
            }
            if (Settings.Default.WindowSize == null)
            {
                this.Size = Settings.Default.WindowSize;
            }
            _presenter.PopulateGrid();
            DetectMalware();
        }

        private void DetectMalware()
        {
            if (lstHosts.Items.Count > 23)
            {
                MessageBox.Show("Possible malware found, download original hosts file?", "Malware detected", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            }
            else
            {
                MessageBox.Show("Malware not found", "No malware", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            FrmConfig formConf = new FrmConfig();
            this.Visible = false;
            formConf.ShowDialog();
            this.Close();
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            var res = MessageBox.Show("Are you sure you want to exit?", "Confirm exit", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (res == DialogResult.Yes)
            {
                var saveProgress = MessageBox.Show("Save position in program for next time?", "Save progress", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (saveProgress == DialogResult.Yes)
                {
                    Settings.Default.WindowLocation = this.Location;
                    if (this.WindowState == FormWindowState.Normal)
                    {
                        Settings.Default.WindowSize = this.Size;
                    }
                    else
                    {
                        Settings.Default.WindowSize = this.RestoreBounds.Size;
                    }
                    Settings.Default.Save();
                }
                Application.Exit();
            }
            else
            {
                return;
            }

        }
        #region Accessors
        public String[] hostsArray
        {
            set
            {
                foreach (string host in value)
                {
                    lstHosts.Items.Add(host);
                }
            }
        }
        public string adminStatus
        {
            set
            {
                if (value == "Not admin")
                {
                    MessageBox.Show("You must be an administrator to access the hosts file", "Access Denied", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    FrmConfig formConf = new FrmConfig();
                    this.Visible = false;
                    formConf.ShowDialog();
                    this.Close();
                }
            }
        }
        #endregion

    }
}
