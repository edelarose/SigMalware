using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace SigMalware
{
    public partial class FrmFPositive : Form
    {
        #region Attributes & Constructor
        String fileStatus;
        public FrmFPositive()
        {
            InitializeComponent();
        }
        #endregion
        #region Public methods
        public void Init(List<string> falseP)
        {
            txtFile.Text = String.Join("\t", falseP.ToArray());
            if (!this.Visible)
            {
                this.ShowDialog();
            }
        }
        //validate email is in correct format
        public bool isEmailCorrect(string email)
        {
            return Regex.IsMatch(email, @"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$",
                  RegexOptions.IgnoreCase);
        }
        public void CreateEmail()
        {
            MailMessage mail = new MailMessage("sibmet@kajp.im", "edele_gormley@hotmail.co.uk");
            List<string> attachments = new List<string>(txtFile.Text.Split());
            mail.Body = "This attached file(s) has been marked incorrectly by a user in SIBMET" + fileStatus + txtAdditional.Text
                + " reply to sender: " + txtEmail.Text;
            if (attachments.Count == 1)
            {
                mail.Attachments.Add(new Attachment(attachments[0]));
            }
            else if (attachments.Count == 2)
            {
                mail.Attachments.Add(new Attachment(attachments[0]));
                mail.Attachments.Add(new Attachment(attachments[1]));
            }
            else if (attachments.Count == 3)
            {
                mail.Attachments.Add(new Attachment(attachments[0]));
                mail.Attachments.Add(new Attachment(attachments[1]));
                mail.Attachments.Add(new Attachment(attachments[2]));
            }
            else if (attachments.Count == 4)
            {
                mail.Attachments.Add(new Attachment(attachments[0]));
                mail.Attachments.Add(new Attachment(attachments[1]));
                mail.Attachments.Add(new Attachment(attachments[2]));
                mail.Attachments.Add(new Attachment(attachments[3]));
            }
            else if (attachments.Count == 5)
            {
                mail.Attachments.Add(new Attachment(attachments[0]));
                mail.Attachments.Add(new Attachment(attachments[1]));
                mail.Attachments.Add(new Attachment(attachments[2]));
                mail.Attachments.Add(new Attachment(attachments[3]));
                mail.Attachments.Add(new Attachment(attachments[4]));
            }
            mail.Subject = "SIBMET - Incorrectly marked file";

            SmtpClient theClient = new SmtpClient("mail.kajp.im", 25);
            theClient.EnableSsl = false;
            theClient.UseDefaultCredentials = false;
            theClient.DeliveryMethod = SmtpDeliveryMethod.Network;
            NetworkCredential cred = new NetworkCredential("sibmet+kajp.im", "kiery123");
            theClient.Credentials = cred;
            theClient.Send(mail);
            MessageBox.Show("Message sent", "Sent", MessageBoxButtons.OK, MessageBoxIcon.Information);
            this.Close();
        }
        #endregion
        #region Eventhandlers
        private void btnBrowse_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "txt files(*.txt) | *.txt";
            string username = Environment.UserName;
            dialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            dialog.Title = "Select a file";
            dialog.Multiselect = false;
            dialog.CheckFileExists = true;
            dialog.CheckPathExists = true;
            dialog.DefaultExt = "txt";
            if (dialog.ShowDialog() != DialogResult.Cancel)
            {
                string filePath = Path.GetFullPath(dialog.FileName);
                txtFile.Text = filePath;
            }
            else
            {
                txtFile.Text = "";
            }

        }
        private void btnSend_Click(object sender, EventArgs e)
        {
            if (CheckEmail() && !isEmailCorrect(txtEmail.Text))
            {
                MessageBox.Show("Email address is not in the correct format", "Incorrect email", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            if (!CheckTextField())
            {
                txtFile.BackColor = Color.Red;
                MessageBox.Show("Please choose a file to mark as a false positive", "Incomplete form", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            if (!CheckEmail())
            {
                txtEmail.BackColor = Color.Red;
                MessageBox.Show("Please complete the email address field", "Incomplete form", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else
            {
                try
                {
                    CreateEmail();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
        }
        private void btnCancel_Click(object sender, EventArgs e)
        {
            var sure = MessageBox.Show("Are you sure you want to cancel?", "Cancel False Positive", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (sure == DialogResult.Yes)
            {
                this.Visible = false;
                this.Close();
            }
            else
            {
                return;
            }
        }
        private void btnRadios_CheckChanged(object sender, EventArgs e)
        {
            if (((RadioButton)sender).Checked)
                fileStatus = ((RadioButton)sender).Text;
            else
            {
                MessageBox.Show("Please select a type", "No Type Selected", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                fileStatus = null;
            }
        }
        #endregion   
        #region Accessors
        bool CheckTextField()
        {
            return txtFile.Text != String.Empty;
        }
        bool CheckEmail()
        {
            return txtEmail.Text != String.Empty;
        }
        #endregion
    }
}
