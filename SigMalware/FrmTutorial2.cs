using Common.Lib.dll.Presenters;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Diagnostics;
using System.Runtime.InteropServices;
using WMPLib;

namespace SigMalware
{
    public partial class FrmTutorial2 : Form
    {
        //instantiate the Presenter
        TutorialPresenter _presenter = new TutorialPresenter();
        public FrmTutorial2()
        {
            InitializeComponent();
            _presenter.GetAllHashes();
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            FrmTutorial1 formTut1 = new FrmTutorial1();
            this.Visible = false;
            formTut1.ShowDialog();
            this.Close();

        }
        private void btnNext_Click(object sender, EventArgs e)
        {
            FrmScan formScan = new FrmScan();
            this.Visible = false;
            formScan.ShowDialog();
            this.Close();
        }
        private void btnCompare_Click(object sender, EventArgs e)
        {
            string labelSig = lblExSig.Text; 
            DataSet hashes = _presenter.GetAllHashes();

            foreach (DataTable table in hashes.Tables)
            {
                bool returnCode = _presenter.CompareCHash(labelSig);

                if (returnCode != false)
                {
                    MessageBox.Show("Malware detected", "Malware", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    MessageBox.Show("No malware", "OK", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
        private void btnCompare2_Click(object sender, EventArgs e)
        {
            string labelChanged = lblChangedSig.Text;
            DataSet hashes = _presenter.GetAllHashes();

            foreach (DataTable table in hashes.Tables)
            {
                bool returnCode = _presenter.CompareHash(labelChanged);

                if (returnCode != false)
                {
                    MessageBox.Show("Malware detected", "Malware", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    MessageBox.Show("No malware", "OK", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void btnCircum_Click(object sender, EventArgs e)
        {
            pictureBox.Visible = true;
            System.Timers.Timer timer = new System.Timers.Timer(2500);
            timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);
            timer.AutoReset = false;
            timer.Enabled = true;
            btnCompare.Visible = false;
            btnCompare2.Visible = true;
        }

        void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            pictureBox.Image = global::SigMalware.Properties.Resources.sigchange;
        }


    }
}
