using Common.Lib.Interfaces;
using Common.Lib.dll.Presenters;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;

namespace SigMalware
{
    public partial class FrmTutorial1 : Form, IMainView 
    {
        //instantiate the Presenter
        TutorialPresenter _presenter;
        public FrmTutorial1()
        {
            InitializeComponent();
            _presenter = new TutorialPresenter(this);
            _presenter.GetAllHashes();
            WMPLib.WindowsMediaPlayer wmp = new WMPLib.WindowsMediaPlayer();
            wmp.PlayStateChange += new WMPLib._WMPOCXEvents_PlayStateChangeEventHandler(PlayStateChange);
        }

        private void btnSkip_Click(object sender, EventArgs e)
        {
            FrmScan formScan = new FrmScan();
            this.Visible = false;
            formScan.ShowDialog();
            this.Close();
        }
        private void btnNext_Click(object sender, EventArgs e)
        {
            FrmTutorial2 formTut2 = new FrmTutorial2();
            this.Visible = false;
            formTut2.ShowDialog();
            this.Close();
        }
        private void btnCompare_Click(object sender, EventArgs e)
        {
            DataSet hashes = _presenter.GetAllHashes();
            //DataTable table = hashes.Tables["malware_samples"];
            foreach (DataTable table in hashes.Tables)
            {
                //string below can be SQL injected
                string str = "Select * from malware_samples WHERE (sha1 LIKE '" + lblExSig.Text + "')";
                // TODO Make query into stored procedure using MVP
                /*"Select * from malware_samples WHERE (sha1 LIKE ?)";
                SQLiteCommand cmd = new SQLiteCommand(str, connection);
                cmd.Parameters.AddWithValue("FirstParam", lblExSig.Text);*/
                
                if (table.Rows.Count != 0)
                {
                    MessageBox.Show("Malware detected", "Malware", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    MessageBox.Show("No malware", "OK", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void btnCircum_Click(object sender, EventArgs e)
        {
            if (wmp.playState != WMPLib.WMPPlayState.wmppsStopped)
            {
                PlayStateChange(3);
                double dur = wmp.currentMedia.duration;
                
                if (wmp.playState == WMPLib.WMPPlayState.wmppsStopped)
                {
                    PlayStateChange(1);
                }
            }
                
        }

        private void PlayStateChange(int NewState)
        {
            switch(NewState)
            {
                case 0: //Undefined
                    break;

                case 1:     //Stopped
                wmp.close();
                lblChangedSig.Visible = true;
                break;

                case 2:     //Paused
                break;

                case 3:     //Playing
                //animation
                wmp.URL = @"C:\Users\Edele\Documents\Visual Studio 2010\Projects\SigMalware\SigMalware\images\sigchange.avi";
                wmp.Visible = true;
                wmp.uiMode = "none";
                
                break;

                case 4:     //ScanForward
                break;

                case 5:     //ScanReverse
                break;

                case 6:     //Buffering
                break;

                case 7:     //Waiting
                break;

                case 8:     //MediaEnded
                break;

                case 9:     //Transitioning
                break;

                case 10:    //Ready
                break;

                case 11:    //Reconnecting
                break;

                case 12:    //Last
                break;

                default:
                Console.WriteLine("Unknown State: " + NewState.ToString());
                break;
            }
        }

        private void FrmTutorial1_Load(object sender, EventArgs e)
        {
            
        }
        public string TableName
        {
            get;
            set;

        }
       

        public bool labelVisible
        {
            get { return lblChangedSig.Visible; }
            set { lblChangedSig.Visible = value; }
        }

    }
}
