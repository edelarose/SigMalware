using System.Data;
using System.Data.SQLite;
using System.Configuration;
using System;

namespace Common.Lib.Models
{
    public class Model
    {
        public DataSet GetAllHashes()
        {
            DataSet hashes = new DataSet();
            const string query = @"Select sha1 from malware_samples";
            try
            {
                using (SQLiteConnection Connection = new SQLiteConnection(ConfigurationManager.ConnectionStrings["SigMalware"].ConnectionString))
                using (SQLiteCommand command = new SQLiteCommand(query, Connection))
                {
                    command.CommandType = CommandType.Text;
                    Connection.Open();
                    try
                    {
                        command.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        string e = ex.Message;
                        command.Dispose();
                        Connection.Close();
                    }
                    finally
                    {
                        SQLiteDataAdapter dataAdapter = new SQLiteDataAdapter(command);
                        dataAdapter.Fill(hashes);
                        Console.WriteLine(hashes);
                        command.Dispose();
                        Connection.Close();
                    }
                    return hashes;
                }
            }
            catch (SQLiteException ex)
            {
                string e = ex.Message;
                return new DataSet();
            }
        }
        public bool CompareHash(string toCompare)
        {
            Boolean returnCode;
            object value;
            const string sqlquery = @"Select count(*) from malware_samples WHERE (sha1 LIKE ?)";
            try
            {
                using (SQLiteConnection conn = new SQLiteConnection(ConfigurationManager.ConnectionStrings["SigMalware"].ConnectionString))
                using (SQLiteCommand cmd = new SQLiteCommand(sqlquery, conn))
                {
                    cmd.CommandType = CommandType.Text;
                    SQLiteParameter param = new SQLiteParameter();
                    param.ParameterName = "?";
                    param.Value = toCompare;
                    cmd.Parameters.Add(param);
                    conn.Open();
                    try
                    {
                        value = cmd.ExecuteScalar();
                        if (value != null)
                        {
                            returnCode = true;
                        }
                        else
                        {
                            returnCode = false;
                        }
                    }
                    catch (Exception ex)
                    {
                        string e = ex.Message;
                        cmd.Dispose();
                        conn.Close();
                        returnCode = false;
                    }
                    return returnCode;
                }

            }
            catch (SQLiteException e)
            {
                string ex = e.Message;
                return new Boolean();
            }
        }
    }
}
