using System.Diagnostics;
using System.Windows.Forms;
using System;
using System.Text;
using System.Collections.Generic;
using System.Threading;

namespace Common.Lib.dll.Presenters
{
    public class TaskPresenter
    {
        #region Attributes & Constructor
        private ITaskView _View;
        public TaskPresenter(ITaskView view)
        {
            _View = view;
        }
        #endregion
        #region Public Methods
        public void FillApps()
        {
            _View.apps = Process.GetProcesses(".");
        }
        public void FillTaskList()
        {
            Process[] Prc = Process.GetProcesses(Environment.MachineName.ToString());
            Cursor.Current = Cursors.WaitCursor;
            int threadsCount = 0;
            
            foreach (Process process in Prc)
                threadsCount += process.Threads.Count;
            _View.statuspanel1 = "Processes: " + Prc.Length.ToString();
            _View.statuspanel2 = "Threads: " + (threadsCount + 1).ToString();
            _View.processes = Prc;
            Cursor.Current = Cursors.Default;
        }
        public void EndProcess(int pid)
        {
            var msg = MessageBox.Show("This will end a process!", "Warning: End Process", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            if (msg == DialogResult.OK)
            {
                try
                {
                    Process.GetProcessById(pid, Environment.MachineName.ToString()).Kill();
                    FillTaskList();
                }
                catch
                {
                    MessageBox.Show("Could not end process", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }
        public void DetectMalware()
        {
            Thread.Sleep(500);
            string mal1 = "Security";
            string mal2 = "malware";
            string mal3 = "virus";
            if (_View.processName.Contains(mal1) || _View.processName.Contains(mal2) || _View.processName.Contains(mal3))
            {
                var malware = MessageBox.Show("Possible Malware threat found, Kill process?", "Threat found", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (malware == DialogResult.Yes)
                {
                    Process.GetProcessById(_View.selectedProcess, Environment.MachineName.ToString()).Kill();
                    _View.malwareStatus = "Malware Killed";
                }
                else
                {
                    var falsepositive = MessageBox.Show("Set process as false positive?", "False positive?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (falsepositive == DialogResult.Yes)
                    {
                        var sure = MessageBox.Show("Warning: only mark processes as a false positive if you know they are safe", "Are you sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (sure == DialogResult.Yes)
                        {
                            _View.malwareStatus = "False Positive";
                        }
                        else
                        {
                            _View.malwareStatus = "Malware found";
                        }
                    }
                    else
                    {
                        _View.malwareStatus = "Malware found";
                    }
                }
            }
            else
            {
                MessageBox.Show("No malware found in task manager. Please ensure to scan your computer using up-to-date anti-malware software.", "No threats", MessageBoxButtons.OK, MessageBoxIcon.Information);
                _View.malwareStatus = "No malware found";
            }
        }
        #endregion
    }

    public interface ITaskView
    {
        #region Accessors
        Process[] processes { set; }
        Process[] apps { set; }
        string processName { get; }
        string statuspanel1 { set; }
        string statuspanel2 { set; }
        int selectedProcess { get; }
        string malwareStatus { set; }
        #endregion
    }
}
